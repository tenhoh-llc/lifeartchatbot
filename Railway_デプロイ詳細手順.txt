================================================================================
                    Railwayデプロイ完全マニュアル
                    LifeArt Chatbot デプロイ手順書
================================================================================

作成日: 2025年9月25日
対象システム: LifeArt Chatbot (就業規則検索システム)

================================================================================
【目次】
================================================================================

1. 事前準備
2. GitHubリポジトリの準備
3. Railwayアカウントの作成と初期設定
4. プロジェクトのデプロイ
5. 環境変数の設定
6. デプロイの確認とテスト
7. 初期設定と運用開始
8. トラブルシューティング
9. メンテナンス手順

================================================================================
【1. 事前準備】
================================================================================

■ 必要なもの
─────────────────────────────────────
1. GitHubアカウント
   - https://github.com でアカウント作成
   - メールアドレスの確認を完了させる

2. Railwayアカウント  
   - https://railway.app でアカウント作成
   - GitHub連携を許可

3. ローカル環境の確認
   - アプリケーションが正常に動作していることを確認
   - すべてのPDFファイルが所定の場所にあることを確認

■ プロジェクトファイルの確認
─────────────────────────────────────
以下のファイルが存在することを確認してください：

✓ railway.toml     - Railway設定ファイル
✓ Procfile        - プロセス起動設定
✓ runtime.txt     - Pythonバージョン指定
✓ requirements.txt - 依存パッケージリスト
✓ app.py         - メインアプリケーション
✓ ライフアート株式会社就業規則PDF/ - PDFファイルディレクトリ

================================================================================
【2. GitHubリポジトリの準備】
================================================================================

■ 手順1: ローカルリポジトリの初期化
─────────────────────────────────────
ターミナルを開き、プロジェクトディレクトリで以下を実行：

cd /Users/anakin/LifeartChatbot
git init

■ 手順2: .gitignoreファイルの作成・更新
─────────────────────────────────────
以下の内容で.gitignoreを作成または更新：

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/

# データベース
*.sqlite
*.db

# 環境設定
.env
.env.local

# ログ
logs/
*.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

■ 手順3: ファイルをGitに追加
─────────────────────────────────────
git add .
git status  # 追加されるファイルを確認
git commit -m "Initial commit for Railway deployment"

■ 手順4: GitHubに新規リポジトリを作成
─────────────────────────────────────
1. https://github.com にログイン
2. 右上の「+」ボタン → 「New repository」
3. 以下の設定で作成：
   - Repository name: LifeartChatbot
   - Description: 就業規則検索システム
   - Private（プライベート）を選択 ※重要：機密情報を含むため
   - 「Create repository」をクリック

■ 手順5: GitHubにプッシュ
─────────────────────────────────────
GitHubに表示されるコマンドを実行：

git remote add origin https://github.com/あなたのユーザー名/LifeartChatbot.git
git branch -M main
git push -u origin main

※ユーザー名とパスワード（またはパーソナルアクセストークン）の入力を求められます

================================================================================
【3. Railwayアカウントの作成と初期設定】
================================================================================

■ 手順1: Railwayアカウント作成
─────────────────────────────────────
1. https://railway.app にアクセス
2. 「Start a New Project」をクリック
3. 「Login with GitHub」を選択
4. GitHubアカウントでログイン
5. Railwayからのアクセス許可を承認

■ 手順2: プランの選択
─────────────────────────────────────
推奨プラン：
- Developer Plan ($5/月)
  - 500時間の実行時間
  - 8GB RAM
  - 十分な性能

※最初はTrialプランで試して、後からアップグレードも可能

================================================================================
【4. プロジェクトのデプロイ】
================================================================================

■ 手順1: 新規プロジェクト作成
─────────────────────────────────────
1. Railwayダッシュボードで「New Project」をクリック
2. 「Deploy from GitHub repo」を選択
3. リポジトリリストから「LifeartChatbot」を選択
4. 「Deploy Now」をクリック

■ 手順2: ビルドの確認
─────────────────────────────────────
自動的にビルドが開始されます：
- ビルドログが表示される
- 「Build successful」と表示されるまで待つ（3-5分程度）

================================================================================
【5. 環境変数の設定】
================================================================================

■ Railwayダッシュボードでの設定
─────────────────────────────────────
1. プロジェクトを選択
2. 「Variables」タブをクリック
3. 「+ New Variable」をクリックして以下を設定：

必須の環境変数：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
変数名: APP_PASSWORD
値: your_secure_password_123!
説明: アプリケーションのログインパスワード
※必ず強力なパスワードを設定してください

変数名: PDF_DIR
値: ./ライフアート株式会社就業規則PDF
説明: PDFファイルの格納ディレクトリ

変数名: INDEX_PATH
値: ./data/index.sqlite
説明: 検索インデックスの保存先

変数名: LOG_LEVEL
値: INFO
説明: ログの詳細度（INFO/DEBUG/WARNING/ERROR）

変数名: TZ
値: Asia/Tokyo
説明: タイムゾーン設定

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

4. 「Save」または「Deploy」をクリック
5. 環境変数が反映されるまで待つ

================================================================================
【6. デプロイの確認とテスト】
================================================================================

■ 手順1: URLの確認
─────────────────────────────────────
1. Railwayダッシュボードの「Settings」タブ
2. 「Domains」セクションを確認
3. 生成されたURL（例: lifeart-chatbot.up.railway.app）をコピー

■ 手順2: アプリケーションへのアクセス
─────────────────────────────────────
1. ブラウザで生成されたURLにアクセス
2. Streamlitアプリケーションが表示されることを確認
3. 以下が表示されればOK：
   - ログイン画面
   - 「パスワードを入力してください」のプロンプト

■ 手順3: ログインテスト
─────────────────────────────────────
1. 設定したAPP_PASSWORDを入力
2. 「ログイン」ボタンをクリック
3. メイン画面が表示されることを確認

================================================================================
【7. 初期設定と運用開始】
================================================================================

■ 手順1: インデックスの構築（重要）
─────────────────────────────────────
初回アクセス時は必ず実行：

1. ログイン後、サイドバーを確認
2. 「🔧 管理機能」セクションを開く
3. 「インデックスを再構築」ボタンをクリック
4. 処理完了メッセージが表示されるまで待つ（1-3分）
5. 「✅ インデックスの再構築が完了しました」と表示されればOK

■ 手順2: 動作確認
─────────────────────────────────────
1. 検索ボックスに「有給」や「休暇」などのキーワードを入力
2. 「検索」ボタンをクリック
3. 検索結果が表示されることを確認
4. PDFの該当箇所が正しく表示されているか確認

■ 手順3: 社内への展開
─────────────────────────────────────
1. アクセスURL: https://your-app.railway.app
2. ログインパスワード: 設定したパスワード
3. 使用方法: 
   - キーワードを入力して検索
   - 結果から該当箇所を確認

================================================================================
【8. トラブルシューティング】
================================================================================

■ 問題1: ビルドが失敗する
─────────────────────────────────────
症状: Deployment failed というエラー

解決方法:
1. requirements.txt を確認
2. Pythonバージョンを確認（runtime.txt）
3. ビルドログでエラー詳細を確認

■ 問題2: アプリケーションが起動しない
─────────────────────────────────────
症状: Application failed to respond

解決方法:
1. 環境変数PORTが設定されているか確認
2. railway.tomlのstartCommandを確認
3. ログでエラーを確認

コマンド修正例:
streamlit run app.py --server.port=$PORT --server.address=0.0.0.0 --server.headless=true

■ 問題3: PDFが見つからない
─────────────────────────────────────
症状: PDFファイルが見つかりませんというエラー

解決方法:
1. PDFディレクトリがGitにコミットされているか確認
   git ls-files | grep pdf
2. 環境変数PDF_DIRのパスを確認
3. 大文字小文字の違いがないか確認

■ 問題4: ログインできない
─────────────────────────────────────
症状: パスワードが違いますというエラー

解決方法:
1. 環境変数APP_PASSWORDを再確認
2. パスワードに特殊文字が含まれている場合は引用符で囲む
3. 環境変数を再デプロイ

■ 問題5: 検索結果が表示されない
─────────────────────────────────────
症状: 検索しても結果が0件

解決方法:
1. インデックスの再構築を実行
2. PDFファイルが正しく読み込まれているか確認
3. ログでエラーがないか確認

================================================================================
【9. メンテナンス手順】
================================================================================

■ PDFファイルの更新
─────────────────────────────────────
1. ローカルでPDFファイルを更新
2. Gitにコミット＆プッシュ
   git add ライフアート株式会社就業規則PDF/
   git commit -m "Update PDF files"
   git push origin main
3. Railwayで自動デプロイを待つ
4. デプロイ完了後、インデックスを再構築

■ アプリケーションの更新
─────────────────────────────────────
1. ローカルでコードを修正
2. テストを実行
3. Gitにコミット＆プッシュ
   git add .
   git commit -m "Update application"
   git push origin main
4. 自動デプロイを確認

■ ログの確認
─────────────────────────────────────
Railwayダッシュボード:
1. プロジェクトを選択
2. 「Logs」タブをクリック
3. リアルタイムログを確認

Railway CLI使用:
railway logs --tail 100

■ バックアップ
─────────────────────────────────────
定期的なバックアップ推奨:
1. SQLiteデータベースのダウンロード
2. 環境変数の記録
3. PDFファイルのバックアップ

================================================================================
【サポート情報】
================================================================================

■ Railway関連
- ドキュメント: https://docs.railway.app
- ステータス: https://status.railway.app
- サポート: support@railway.app

■ Streamlit関連
- ドキュメント: https://docs.streamlit.io
- フォーラム: https://discuss.streamlit.io

■ 緊急時の対応
─────────────────────────────────────
1. Railwayダッシュボードでログを確認
2. 一時的にローカル環境で運用
3. 必要に応じてロールバック

================================================================================
【チェックリスト】
================================================================================

デプロイ前:
□ requirements.txt が最新
□ railway.toml が存在
□ PDFファイルが配置済み
□ ローカルでテスト完了

デプロイ時:
□ GitHubにプッシュ完了
□ Railwayでビルド成功
□ 環境変数を設定
□ アプリケーションにアクセス可能

デプロイ後:
□ ログイン機能確認
□ インデックス再構築実行
□ 検索機能のテスト
□ ユーザーへの通知

================================================================================
                            以上
================================================================================